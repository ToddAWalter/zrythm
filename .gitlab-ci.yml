# SPDX-FileCopyrightText: Â© 2024 Alexandros Theodotou <alex@zrythm.org>
# SPDX-License-Identifier: LicenseRef-ZrythmLicense

workflow:
  rules:
    # run merge request pipelines
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # do not run branch pipelines if corresponding merge requests exist...
    # (this avoids duplicate pipelines)
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # ...but otherwise run branch pipelines
    - if: $CI_COMMIT_BRANCH
    # run tag pipelines
    - if: $CI_COMMIT_TAG

variables:
  COMMON_MESON_OPTIONS: >-
    -Dstrict_flags=true
    -Dyaml_project_compatibility=enabled
    -Dforce_fallback_for=gtk4,libadwaita,libpanel,yyjson,libcyaml
    -Dtests=true
    -Dbenchmarks=true

stages:
  - setup
  - check
  - build
  - test
  - deploy

.unix-activate-venv: &unix-activate-venv
  - source ./venv/bin/activate

.windows-activate-venv: &windows-activate-venv
  - ./venv/Scripts/Activate.ps1

.mac-enable-brew-env: &mac-enable-brew-env
  - eval "$(/opt/homebrew/bin/brew shellenv)";

.windows-enable-vs-env: &windows-enable-vs-env
  - Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
  - >-
    Enter-VsDevShell
    -VsInstallPath "C:\Program Files\Microsoft Visual Studio\2022\Community"
    -SkipAutomaticLocation
  #- chcp 65001 # UTF-8

.gnu-linux-template:
  tags:
    - archlinux
  variables:
    CC: "ccache gcc"
    CXX: "ccache g++"
    CC_LD: mold
    CXX_LD: mold
    BUILDDIR: "build_gnu_linux"
  before_script:
    - *unix-activate-venv
  artifacts:
    paths:
      - $BUILDDIR
    expire_in: 3 days

.mac-arm-template:
  tags:
    - mac-arm
  variables:
    CC: "ccache clang"
    CXX: "ccache clang++"
    BUILDDIR: "build_mac_arm"
    PKG_CONFIG_PATH: "/opt/zrythm-installed-deps/lib/pkgconfig:$PKG_CONFIG_PATH"
  before_script:
    - *mac-enable-brew-env
    - *unix-activate-venv
  artifacts:
    paths:
      - $BUILDDIR
    expire_in: 3 days

.windows-template:
  tags:
    - windows11
  variables:
    CC: "ccache cl"
    CXX: "ccache cl"
    BUILDDIR: "build_windows"
    BOOST_ROOT: "C:\\Boost\\boost_1_86_0"
    VSLANG: "1033"
    VCPKG_INSTALLED_DIR: "C:\\vcpkg\\installed\\x64-windows"
    CL: "/MP1" # prepended to the cl command
    _CL_: "" # appended to the cl command
  before_script:
    - *windows-enable-vs-env
    - *windows-activate-venv
  artifacts:
    paths:
      - $BUILDDIR
    expire_in: 3 days

default:
  cache:
  # this number must be bumped every time these subprojects are updated
  - key: cache-3-$CI_RUNNER_DESCRIPTION
    paths:
      - venv
      - subprojects

configure:gnu/linux:
  extends: .gnu-linux-template
  stage: setup
  before_script:
    - python3 -m venv venv
    - *unix-activate-venv
    - python3 -m pip install -r requirements.txt
  script:
    - meson setup $BUILDDIR $COMMON_MESON_OPTIONS -Dbackend_max_links=4

configure:mac-arm:
  extends: .mac-arm-template
  stage: setup
  before_script:
    - *mac-enable-brew-env
    - python3 -m venv venv
    - *unix-activate-venv
    - python3 -m pip install -r requirements.txt
  script:
    - meson setup $BUILDDIR $COMMON_MESON_OPTIONS -Dgtk4:x11-backend=false -Dx11=disabled

configure:windows:
  extends: .windows-template
  stage: setup
  before_script:
    - *windows-enable-vs-env
    - python -m venv venv
    - *windows-activate-venv
    - python -m pip install -r requirements.txt
  script:
    # TODO: enable strict flags & tests
    - >-
      meson setup "${env:BUILDDIR}"
      -Dstrict_flags=false
      -Dyaml_project_compatibility=enabled
      "-Dforce_fallback_for=libcyaml,magic_enum"
      -Dtests=false
      -Dbenchmarks=false 
      -Dmanpage=false -Dcompletions=false
      -Dfftw3_threads_separate=false
      "-Dsoxr_lib_dir=${env:VCPKG_INSTALLED_DIR}\lib"
      "-Dsoxr_include_dir=${env:VCPKG_INSTALLED_DIR}\include"
      "--pkg-config-path=${env:VCPKG_INSTALLED_DIR}\lib\pkgconfig;C:\lv2\lib\pkgconfig;C:\gtk-for-zrythm\lib\pkgconfig;C:\Users\alex\source\repos\carla\carla_installed\lib\pkgconfig"
      -Dcarla_binaries_dir=C:\Users\alex\source\repos\carla\carla_installed\bin
      --backend=vs2022

clang-format-check:
  extends: .gnu-linux-template
  stage: check
  script:
    - ninja -C $BUILDDIR clang-format-check

reuse-check:
  extends: .gnu-linux-template
  stage: check
  script:
   - reuse lint

exif-check:
  extends: .gnu-linux-template
  stage: check
  script:
   - scripts/exif_check.sh

build:gnu/linux:
  extends: .gnu-linux-template
  stage: build
  script:
   - ninja -C $BUILDDIR

build:mac-arm:
  extends: .mac-arm-template
  stage: build
  script:
    - ninja -C $BUILDDIR

build:windows:
  extends: .windows-template
  stage: build
  script:
    - meson compile -C ${env:BUILDDIR} --verbose --vs-args="-maxCpuCount:1,-nologo"

.unix_test_cmd: &unix_test_cmd
  - ninja -C $BUILDDIR test || (cat "$BUILDDIR/meson-logs/testlog.txt" && exit 1)

test:gnu/linux:
  extends: .gnu-linux-template
  stage: test
  script:
    - *unix_test_cmd

test:mac-arm:
  extends: .mac-arm-template
  stage: test
  script:
    - *unix_test_cmd

test:windows:
  extends: .windows-template
  stage: test
  script:
    - ninja -C ${env:BUILDDIR} test; if (-not $?) { Get-Content ${env:BUILDDIR}/meson-logs/testlog.txt; exit 1 }

test-valgrind:
  extends: .gnu-linux-template
  stage: test
  script:
    - meson test -C $BUILDDIR --wrap='valgrind --undef-value-errors=no --exit-on-first-error=yes --error-exitcode=1' --timeout-multiplier 3 || (cat "$BUILDDIR"/meson-logs/testlog-valgrind.txt && exit 1)

update-manual:
  stage: deploy
  only:
    - master
    - tags
  tags:
    - archlinux
  script:
    - ninja -C $BUILDDIR manual_bundle &> manual_bundle_results.txt || (cat manual_bundle_results.txt && exit 1)
    - rsync -av --no-group --omit-dir-times --exclude '*.zip' "$BUILDDIR"/doc/user/_rendered/* $REMOTE_CI_USER@www.zrythm.org:$REMOTE_USER_MANUAL_UPLOAD_PATH
  before_script:
    - eval $(ssh-agent -s)
    #- ssh-add <(echo "$SSH_PRIVATE_KEY")
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - *unix-activate-venv

update-dev-docs:
  stage: deploy
  only:
    - master
    - tags
  tags:
    - archlinux
  script:
    - ninja -C $BUILDDIR gen-dev-docs &> gen_dev_docs_results.txt || (cat gen_dev_docs_results.txt && exit 1)
    - rsync -av --no-group --omit-dir-times "$BUILDDIR"/doc/dev/html/* $REMOTE_CI_USER@www.zrythm.org:$REMOTE_DEV_DOCS_UPLOAD_PATH
  before_script:
    - eval $(ssh-agent -s)
    #- ssh-add <(echo "$SSH_PRIVATE_KEY")
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - *unix-activate-venv
  variables:
    GIT_SUBMODULE_STRATEGY: recursive