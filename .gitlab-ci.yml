# SPDX-FileCopyrightText: Â© 2024 Alexandros Theodotou <alex@zrythm.org>
# SPDX-License-Identifier: LicenseRef-ZrythmLicense

workflow:
  rules:
    # run merge request pipelines
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # do not run branch pipelines if corresponding merge requests exist...
    # (this avoids duplicate pipelines)
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # ...but otherwise run branch pipelines
    - if: $CI_COMMIT_BRANCH
    # run tag pipelines
    - if: $CI_COMMIT_TAG

variables:
  COMMON_CMAKE_OPTIONS: >-
    -DZRYTHM_STRICT=ON
    -DZRYTHM_TESTS=ON
    -DZRYTHM_BENCHMARKS=ON
    -DFETCHCONTENT_TRY_FIND_PACKAGE_MODE=NEVER

stages:
  - setup
  - check
  - build # also test/install
  - deploy

.unix-activate-venv: &unix-activate-venv
  - source ./venv/bin/activate

.windows-activate-venv: &windows-activate-venv
  - ./venv/Scripts/Activate.ps1

# .mac-enable-brew-env: &mac-enable-brew-env
  # - eval "$(/opt/homebrew/bin/brew shellenv)";

.windows-enable-vs-env: &windows-enable-vs-env
  - Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
  - >-
    Enter-VsDevShell
    -VsInstallPath "C:\Program Files\Microsoft Visual Studio\2022\Community"
    -SkipAutomaticLocation
    -DevCmdArguments -arch=x64
  #- chcp 65001 # UTF-8

.gnu-linux-template:
  tags:
    - archlinux
  variables:
    BUILDDIR: "build_gnu_linux"
    QT_QPA_PLATFORM: "offscreen"
  before_script:
    - *unix-activate-venv

.mac-arm-template:
  tags:
    - mac-arm
  variables:
    BUILDDIR: "build_mac_arm"
    BOOST_ROOT: "/opt/boost/boost_1_88_0/installed"
  before_script:
    - *unix-activate-venv

.windows-template:
  tags:
    - windows11
  variables:
    BUILDDIR: "build_windows"
    INSTALLDIR: "install_windows"
    BOOST_ROOT: "C:\\Boost\\boost_1_86_0"
    VSLANG: "1033"
    # use /MP1 to disable parallel builds if the compiler messages are hard to read
    CL: "/MP" # prepended to the cl command
    _CL_: "" # appended to the cl command
    _LINK_: /verbose
  before_script:
    - *windows-enable-vs-env
    - *windows-activate-venv

default:
  cache:
  # this number must be bumped every time these subprojects are updated
  - key: cache-8-$CI_RUNNER_DESCRIPTION
    paths:
      - venv
      - "$BUILDDIR/_deps/*-src"

configure:gnu/linux:
  extends: .gnu-linux-template
  stage: setup
  before_script:
    - python3 -m venv venv
    - *unix-activate-venv
    - python3 -m pip install -r requirements.txt
  script:
    - >-
      cmake -B $BUILDDIR $COMMON_CMAKE_OPTIONS
      -G "Ninja"
      -DCMAKE_C_COMPILER=gcc
      -DCMAKE_CXX_COMPILER=g++
      -DCMAKE_PREFIX_PATH=/opt/Qt6.9
  artifacts:
    paths:
      - $BUILDDIR
    exclude:
      - "**/.git"
    expire_in: 3 days

configure:mac-arm:
  extends: .mac-arm-template
  stage: setup
  before_script:
    - python3 -m venv venv
    - *unix-activate-venv
    - python3 -m pip install -r requirements.txt
  script:
    - >-
      cmake -B $BUILDDIR $COMMON_CMAKE_OPTIONS
      -G "Xcode"
      "-DCMAKE_PREFIX_PATH=/opt/zrythm-deps-installed;/opt/Qt6.9"
      -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
  artifacts:
    paths:
      - $BUILDDIR
    exclude:
      - "**/.git"
    expire_in: 3 days

configure:windows:
  extends: .windows-template
  stage: setup
  before_script:
    - *windows-enable-vs-env
    - python -m venv venv
    - *windows-activate-venv
    - python -m pip install -r requirements.txt
  script:
    # TODO: enable strict flags & tests
    - >-
      cmake -B "${env:BUILDDIR}"
      -DZRYTHM_STRICT=ON
      -DZRYTHM_TESTS=OFF
      -DZRYTHM_BENCHMARKS=OFF
      -DFETCHCONTENT_TRY_FIND_PACKAGE_MODE=NEVER
      -DZRYTHM_FFTW3_THREADS_SEPARATE=FALSE
      "-DCMAKE_PREFIX_PATH=C:\zrythm-deps-installed;C:\Qt\Qt-6.9.0;C:\lv2"
      -G "Visual Studio 17 2022"
      -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreadedDLL"
      -DCMAKE_BUILD_TYPE=Debug
      "-DCMAKE_INSTALL_PREFIX=${PWD}\${env:INSTALLDIR}"
  artifacts:
    paths:
      - $BUILDDIR
    exclude:
      - "**/.git"
    expire_in: 3 days

clang-format-check:
  extends: .gnu-linux-template
  stage: check
  needs: []
  script:
    - python3 scripts/run_clang_format.py --dry-run

reuse-check:
  extends: .gnu-linux-template
  stage: check
  needs: []
  script:
   - reuse lint

exif-check:
  extends: .gnu-linux-template
  stage: check
  needs: []
  script:
   - scripts/exif_check.sh

.unix_test_cmd: &unix_test_cmd
  - ctest --test-dir $BUILDDIR -V || (cat "$BUILDDIR/Testing/Temporary/LastTest.log" && exit 1)

build:gnu/linux:
  extends: .gnu-linux-template
  stage: build
  needs:
    - job: configure:gnu/linux
      artifacts: true
    - job: exif-check
    - job: reuse-check
    - job: clang-format-check
  script:
    - cmake --build $BUILDDIR
    - *unix_test_cmd
    - ctest --test-dir $BUILDDIR -V --overwrite MemoryCheckCommand=valgrind --overwrite MemoryCheckCommandOptions="--undef-value-errors=no --exit-on-first-error=yes --error-exitcode=1" -T memcheck || (cat "$BUILDDIR/Testing/Temporary/MemoryChecker.*.log" && exit 1)
    - >-
      git diff -U0 HEAD^
      | python3 /usr/share/clang/clang-tidy-diff.py -p1
      -path ./builddir_cmake -config-file .clang-tidy
      -use-color || true # ignore errors for now
  artifacts:
    paths:
      - $BUILDDIR
    expire_in: 3 days

build:mac-arm:
  extends: .mac-arm-template
  stage: build
  needs:
    - job: configure:mac-arm
      artifacts: true
  script:
    - cmake --build $BUILDDIR --config Debug
    - *unix_test_cmd

build:windows:
  extends: .windows-template
  stage: build
  needs:
    - job: configure:windows
      artifacts: true
  script:
    - cmake --build ${env:BUILDDIR} --config Debug --verbose
    - ctest --test-dir ${env:BUILDDIR} -V; if (-not $?) { Get-Content ${env:BUILDDIR}/Testing/Temporary/LastTest.log; exit 1 }

update-manual:
  stage: deploy
  only:
    - master
    - tags
  tags:
    - archlinux
  script:
    - ninja -C $BUILDDIR manual_bundle &> manual_bundle_results.txt || (cat manual_bundle_results.txt && exit 1)
    - rsync -av --no-group --omit-dir-times --exclude '*.zip' "$BUILDDIR"/doc/user/_rendered/* $REMOTE_CI_USER@www.zrythm.org:$REMOTE_USER_MANUAL_UPLOAD_PATH
  before_script:
    - eval $(ssh-agent -s)
    #- ssh-add <(echo "$SSH_PRIVATE_KEY")
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - *unix-activate-venv

update-dev-docs:
  stage: deploy
  only:
    - master
    - tags
  tags:
    - archlinux
  script:
    - cmake --build $BUILDDIR --target doxygen-docs &> gen_dev_docs_results.txt || (cat gen_dev_docs_results.txt && exit 1)
    - rsync -av --no-group --omit-dir-times "$BUILDDIR"/doc/dev/html/* $REMOTE_CI_USER@www.zrythm.org:$REMOTE_DEV_DOCS_UPLOAD_PATH
  before_script:
    - eval $(ssh-agent -s)
    #- ssh-add <(echo "$SSH_PRIVATE_KEY")
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - *unix-activate-venv
  variables:
    GIT_SUBMODULE_STRATEGY: recursive