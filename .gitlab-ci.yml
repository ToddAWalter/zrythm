# SPDX-FileCopyrightText: Â© 2024 Alexandros Theodotou <alex@zrythm.org>
# SPDX-License-Identifier: LicenseRef-ZrythmLicense

workflow:
  rules:
    # run merge request pipelines
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # do not run branch pipelines if corresponding merge requests exist...
    # (this avoids duplicate pipelines)
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # ...but otherwise run branch pipelines
    - if: $CI_COMMIT_BRANCH
    # run tag pipelines
    - if: $CI_COMMIT_TAG

variables:
  COMMON_MESON_OPTIONS: >-
    -Dstrict_flags=true
    -Dyaml_project_compatibility=enabled
    -Dforce_fallback_for=gtk4,libadwaita,libpanel,yyjson,libcyaml
    -Dtests=true
    -Dbenchmarks=true

stages:
  - setup
  - check
  - build
  - test
  - deploy

.unix_activate_venv: &unix_activate_venv
  - source ./venv/bin/activate

.windows_activate_venv: &windows_activate_venv
  - ./venv/Scripts/Activate.ps1

.mac_enable_brew_env: &mac_enable_brew_env
  - eval "$(/opt/homebrew/bin/brew shellenv)";

.windows_enable_vs_env: &windows_enable_vs_env
  - Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
  - >-
    Enter-VsDevShell
    -VsInstallPath "C:\Program Files\Microsoft Visual Studio\2022\Community"
    -SkipAutomaticLocation

.gnu_linux_template:
  tags:
    - archlinux
  variables:
    CC: "gcc"
    CXX: "g++"
  before_script:
    - *unix_activate_venv

.mac_arm_template:
  tags:
    - mac-arm
  variables:
    PKG_CONFIG_PATH: "/opt/zrythm-installed-deps/lib/pkgconfig:$PKG_CONFIG_PATH"
  before_script:
    - *mac_enable_brew_env
    - *unix_activate_venv

.windows_template:
  tags:
    - windows11
  variables:
    BOOST_ROOT: "C:\\Boost\\boost_1_86_0"
  before_script:
    - *windows_enable_vs_env
    - *windows_activate_venv

default:
  cache:
  # this number must be bumped every time these subprojects are updated
  - key: configured-cache-9
    paths:
      - venv
      - subprojects/gtk4
      - subprojects/libadwaita
      - subprojects/libpanel
      - subprojects/yyjson
      - subprojects/libcyaml
  artifacts:
    paths:
      - build
    expire_in: 3 days

configure:gnu/linux:
  extends: .gnu_linux_template
  stage: setup
  before_script:
    - python3 -m venv venv
    - *unix_activate_venv
    - python3 -m pip install -r requirements.txt
  script:
    - meson setup build $COMMON_MESON_OPTIONS

configure:mac-arm:
  extends: .mac_arm_template
  stage: setup
  before_script:
    - *mac_enable_brew_env
    - python3 -m venv venv
    - *unix_activate_venv
    - python3 -m pip install -r requirements.txt
  script:
    - meson setup build $COMMON_MESON_OPTIONS -Dgtk4:x11-backend=false -Dx11=disabled

configure:windows:
  extends: .windows_template
  stage: setup
  before_script:
    - *windows_enable_vs_env
    - python -m venv venv
    - *windows_activate_venv
    - python -m pip install -r requirements.txt
  script:
    - >-
      meson setup build 
      -Dstrict_flags=true
      -Dyaml_project_compatibility=enabled
      "-Dforce_fallback_for=libadwaita,libpanel,libcyaml,lv2,serd,sord,sratom,lilv,magic_enum"
      -Dtests=true
      -Dbenchmarks=true 
      "-Dgtk4:x11-backend=false" -Dx11=disabled
      -Dmanpage=false -Dcompletions=false
      -Dfftw3_threads_separate=false
      '--pkg-config-path=C:\vcpkg\installed\x64-windows\lib\pkgconfig;C:\Users\alex\source\repos\carla\carla_installed\lib\pkgconfig'
      -Dcarla_binaries_dir=C:\Users\alex\source\repos\carla\carla_installed\bin

clang-format-check:
  extends: .gnu_linux_template
  stage: check
  script:
    - ninja -C build clang-format-check

reuse-check:
  extends: .gnu_linux_template
  stage: check
  script:
   - reuse lint

exif-check:
  extends: .gnu_linux_template
  stage: check
  script:
   - scripts/exif_check.sh

build:gnu/linux:
  extends: .gnu_linux_template
  stage: build
  script:
   - ninja -C build

build:mac-arm:
  extends: .mac_arm_template
  stage: build
  script:
    - ninja -C build

build:windows:
  extends: .windows_template
  stage: build
  script:
   - ninja -C build

.unix_test_cmd: &unix_test_cmd
  - ninja -C build test || (cat build/meson-logs/testlog.txt && exit 1)

test:gnu/linux:
  extends: .gnu_linux_template
  stage: test
  script:
    - *unix_test_cmd

test:mac-arm:
  extends: .mac_arm_template
  stage: test
  script:
    - *unix_test_cmd

test:windows:
  extends: .windows_template
  stage: test
  script:
    - ninja -C build test; if (-not $?) { Get-Content build/meson-logs/testlog.txt; exit 1 }

test_valgrind:
  extends: .gnu_linux_template
  stage: test
  script:
    - meson test -C build --wrap='valgrind --undef-value-errors=no --exit-on-first-error=yes --error-exitcode=1' --timeout-multiplier 3 || (cat build/meson-logs/testlog-valgrind.txt && exit 1)

update_manual:
  stage: deploy
  only:
    - master
    - tags
  tags:
    - archlinux
  script:
    - ninja -C build manual_bundle &> manual_bundle_results.txt || (cat manual_bundle_results.txt && exit 1)
    - rsync -av --no-group --omit-dir-times --exclude '*.zip' build/doc/user/_rendered/* $REMOTE_CI_USER@www.zrythm.org:$REMOTE_USER_MANUAL_UPLOAD_PATH
  before_script:
    - eval $(ssh-agent -s)
    #- ssh-add <(echo "$SSH_PRIVATE_KEY")
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - *unix_activate_venv

update_dev_docs:
  stage: deploy
  only:
    - master
    - tags
  tags:
    - archlinux
  script:
    - ninja -C build gen-dev-docs &> gen_dev_docs_results.txt || (cat gen_dev_docs_results.txt && exit 1)
    - rsync -av --no-group --omit-dir-times build/doc/dev/html/* $REMOTE_CI_USER@www.zrythm.org:$REMOTE_DEV_DOCS_UPLOAD_PATH
  before_script:
    - eval $(ssh-agent -s)
    #- ssh-add <(echo "$SSH_PRIVATE_KEY")
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - *unix_activate_venv
  variables:
    GIT_SUBMODULE_STRATEGY: recursive