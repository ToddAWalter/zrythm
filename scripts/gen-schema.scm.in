;;; SPDX-FileCopyrightText: © 2020-2023 Alexandros Theodotou <alex@zrythm.org>
;;; SPDX-FileCopyrightText: © 2020 Ryan Gonzalez <rymg19 at gmail dot com>
;;; SPDX-License-Identifier: LicenseRef-ZrythmLicense

;;; This file generates the gsettings schema

(add-to-load-path "@SCRIPTS_DIR@")

(define-module (gen-gschema)
  #:use-module (guile-utils)
  #:use-module (ice-9 string-fun)
  #:use-module (ice-9 format)
  #:use-module (ice-9 match)
  #:use-module (srfi srfi-1)
  #:use-module (srfi srfi-9) ; records
  #:use-module (sxml simple))

(define top-id "org.zrythm.Zrythm")

(define-record-type <schema-key>
  (make-schema-key name type default summary
                   description)
  schema-key?
  (name         schema-key-name)
  (type         schema-key-type)
  (default      schema-key-default)
  (summary      schema-key-summary)
  (description  schema-key-description)
  (enum         schema-key-enum
                set-schema-key-enum!)
  (range-min    schema-key-range-min
                set-schema-key-range-min!)
  (range-max    schema-key-range-max
                set-schema-key-range-max!))

(define (make-schema-key-with-enum
          name enum default summary description)
  (let ((key (make-schema-key
               name "" default summary description)))
    (set-schema-key-enum! key enum)
    key))

(define (make-schema-key-with-range
          name type range-min range-max default
          summary description)
  (let ((key (make-schema-key
               name type default summary description)))
    (set-schema-key-range-min! key range-min)
    (set-schema-key-range-max! key range-max)
    key))

(define-record-type <schema>
  (make-schema local-id keys)
  schema?
  ;; ID after "org.zrythm.Zrythm."
  (local-id schema-local-id)
  (keys     schema-keys)
  (preferences-category
    schema-preferences-category
    set-schema-preferences-category!))

(define (schema-id schema)
  (string-append
    top-id "."
    (if (string?
            (schema-preferences-category schema))
      (string-append
        "preferences."
        (schema-preferences-category schema) ".")
      "")
    (schema-local-id schema)))

(define (schema-path schema)
  (string-append
    "/"
    (string-replace-substring
      (schema-id schema) "." "/")
    "/"))

(define (schema-print schema)
  ;; display header
  (format #t "  <schema id=~s
        path=~s>\n"
        (schema-id schema)
        (schema-path schema))
  ;; display keys
  (fold
    (lambda (key keys)
      (format #t
        "    <key name=~s ~a=~s>~a
      <default>~a</default>
      <summary>~a</summary>
      <description>~a</description>
    </key>\n"
        ; key name
        (schema-key-name key)
        ; either "enum" or "type"
        (if (string? (schema-key-enum key))
          "enum"
          "type")
        ; key type name or enum name
        (if (string? (schema-key-enum key))
          (string-append
            top-id "." (schema-key-enum key) "-enum")
          (schema-key-type key))
        ; optional text
        (if (string? (schema-key-range-min key))
          (format #f "\n      <range min=~s max=~s />"
                  (schema-key-range-min key)
                  (schema-key-range-max key))
          "")
        ; <default> element
        (if (or
              (string? (schema-key-enum key))
              (string=? (schema-key-type key) "s"))
          (format #f "~s"
                  (schema-key-default key))
          (schema-key-default key))
        ; summary
        (schema-key-summary key)
        ; description
        (schema-key-description key)))
    '()
    (schema-keys schema))
  ;; close
  (display "  </schema>\n\n"))

;; leave for reference
(define (print-enum-using-sxml in-id nicks)
  (display "  ")
  (let* ((enum-id
           (string-append top-id "."
                          in-id "-enum"))
         (nicks
           (let loop ((nicks nicks)
                      (idx 0)
                      (res '()))
             (match nicks
               (() (reverse res))
               ((nick . rest)
                (loop
                  rest (1+ idx)
                  (cons `(value (@ (nick ,nick)
                                   (value ,idx)))
                        res))))))
         (sxml `(enum (@ (id ,enum-id)) ,nicks)))
    (display (sxml->xml sxml)))
  (newline))

(define (print-enum id nicks)
  (display
    (string-append
      "  <enum id=\"" top-id "." id "-enum\">\n"))
  (fold
    (lambda (nick idx)
      (format #t
        "    <value nick=\"~a\" value=\"~d\"/>\n"
        nick idx)
      (1+ idx))
    0
    nicks)
  (display "  </enum>\n"))

(define-record-type <preferences-category>
  (make-preferences-category name schemas)
  preferences-category?
  (name         preferences-category-name)
  (schemas      preferences-category-schemas))

(define (preferences-category-print category)
  ;; display each schema in this preference category
  (fold
    (lambda (schema schemas)
      (set-schema-preferences-category!
        schema (preferences-category-name category))
      (schema-print schema))
    '()
    (preferences-category-schemas category)))

#!
Args:
1: output file
2: top schema delimited by "."
!#
(define (main . args)

  ;; verify number of args
  (unless (eq? (length args) 3)
    (display "Need 2 arguments")
    (newline)
    (exit -1))

  ;; get args
  (match args
    ((this-program output-file in-top-id)

     (set! top-id in-top-id)

     ;; open file
     (with-output-to-file output-file
       (lambda ()

         ;; print top
         (display
"<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!--

  Copyright (C) 2018-2022 Alexandros Theodotou <alex at zrythm dot org>

  This file is part of Zrythm

  Zrythm is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Zrythm is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with Zrythm.  If not, see <https://www.gnu.org/licenses/>.

-->

<schemalist
  gettext-domain=\"zrythm\">

")

         ;; print enums
         (print-enum
           "audio-backend"
           '("none" "none-libsoundio" "alsa"
             "alsa-libsoundio" "alsa-rtaudio" "jack"
             "jack-libsoundio" "jack-rtaudio"
             "pulseaudio"
             "pulseaudio-libsoundio"
             "pulseaudio-rtaudio"
             "coreaudio-libsoundio" "coreaudio-rtaudio"
             "sdl" "wasapi-libsoundio"
             "wasapi-rtaudio" "asio-rtaudio"))
         (print-enum
           "midi-backend"
           '("none" "alsa" "alsa-rtmidi" "jack"
             "jack-rtmidi" "wmme" "wmme-rtmidi"
             "coremidi-rtmidi"))
         (print-enum
           "language"
           '(@LINGUAS@))
         (print-enum
           "export-time-range"
           '("loop" "song" "custom"))
         (print-enum
           "export-filename-pattern"
           '("append-format"
             "prepend-date-append-format"))
         (print-enum
           "note-length"
           '("bar" "beat" "2/1" "1/1" "1/2" "1/4"
             "1/8" "1/16" "1/32"  "1/64" "1/128"))
         (print-enum
           "note-type"
           '("normal" "dotted" "triplet"))
         (print-enum
           "midi-modifier"
           '("velocity" "aftertouch"))
         (print-enum
           "note-notation"
           '("musical" "pitch"))
         (print-enum
           "plugin-browser-tab"
           '("collection" "author" "category"
             "protocol"))
         (print-enum
           "plugin-browser-filter"
           '("none" "instrument" "effect" "modulator"
             "midi-effect"))
         (print-enum
           "plugin-browser-sort-style"
           '("alpha" "last-used" "most-used"))
         (print-enum
           "file-browser-filter"
           '("none" "audio" "midi" "preset"))
         (print-enum
           "piano-roll-highlight"
           '("none" "chord" "scale" "both"))
         (print-enum
           "pan-law"
           '("zero-db" "minus-three-db"
             "minus-six-db" ))
         (print-enum
           "pan-algorithm"
           '("linear" "sqrt" "sine"))
         (print-enum
           "curve-algorithm"
           '("exponent" "superellipse" "vital" "pulse" "logarithmic"))
         (print-enum
           "buffer-size"
           '("16" "32" "64" "128" "256" "512" "1024"
             "2048" "4096"))
         (print-enum
           "sample-rate"
           '("22050" "32000" "44100" "48000" "88200"
             "96000" "192000"))
         (print-enum
           "transport-display"
           '("bbt" "time"))
         (print-enum
           "jack-transport-type"
           '("master" "client" "none"))
         (print-enum
           "tool"
           '("select-normal" "select-stretch"
             "edit" "cut" "erase" "ramp"
             "audition"))
         (print-enum
           "graphic-detail"
           '("high" "normal" "low" "ultra-low"))
         (print-enum
           "recording-mode"
           '("overwrite-events" "merge-events"
             "takes" "muted-takes"))
         (print-enum
           "bounce-step"
           '("before-inserts" "pre-fader"
             "post-fader"))
         (print-enum
           "preroll-count"
           '("none" "one-bar" "two-bars"
             "four-bars"))
         (print-enum
           "default-velocity"
           '("last-note" "40" "90" "120"))
         (newline)

         ;; -- print normal schemas --

         (schema-print
           (make-schema
             "general"
             (list
               (make-schema-key
                 "recent-projects" "as" "[]"
                 "Recent project list"
                 "A list of recent projects to be referenced on startup.")
               (make-schema-key
                 "first-run" "b" "true"
                 "First run"
                 "Whether this is the first run or not.")
               (make-schema-key
                 "install-dir" "s" ""
                 "Installation directory"
                 "This is the directory Zrythm is installed in. Currently only used on Windows.")
               (make-schema-key
                 "last-project-dir" "s" ""
                 "Last project directory"
                 "Last directory a project was created in.")
               (make-schema-key
                 "run-versions" "as" "[]"
                 "List of all versions run at least once"
                 "A list of versions run at least once.")
               (make-schema-key
                 "last-version-new-release-notified-on"
                 "s" "999"
                 "Last version that was notified of a new release"
                 "The last version that received a 'new version has been released' notification.")
               (make-schema-key
                 "first-check-for-updates" "b" "true"
                 "First check for updates"
                 "Whether this is the first time attempting to check for updates.")
             ))) ;; general

         ;; Monitor schema
         (schema-print
           (make-schema
             "monitor"
             (list
               (make-schema-key-with-range
                 "monitor-vol" "d"
                 "0.0" "2.0" "1.0"
                 "Monitor volume"
                 "The monitor volume in amplitude (0 to 2).")
               (make-schema-key-with-range
                 "mute-vol" "d"
                 "0.0" "0.5" "0.0"
                 "Mute volume"
                 "The monitor mute volume in amplitude (0 to 2).")
               (make-schema-key-with-range
                 "listen-vol" "d"
                 "0.5" "2.0" "1.0"
                 "Listen volume"
                 "The monitor listen volume in amplitude (0 to 2).")
               (make-schema-key-with-range
                 "dim-vol" "d"
                 "0.0" "0.5" "0.1"
                 "Dim volume"
                 "The monitor dim volume in amplitude (0 to 2).")
               (make-schema-key
                 "mono" "b" "false"
                 "Sum to mono"
                 "Whether to sum the monitor signal to mono.")
               (make-schema-key
                 "dim-output" "b" "false"
                 "Dim output"
                 "Whether to dim the the monitor signal.")
               (make-schema-key
                 "mute" "b" "false"
                 "Mute"
                 "Whether to mute the monitor signal.")
               (make-schema-key
                 "l-devices" "as" "[]"
                 "Left output devices"
                 "A list of output devices to route the left monitor output to.")
               (make-schema-key
                 "r-devices" "as" "[]"
                 "Left output devices"
                 "A list of output devices to route the right monitor output to.")
             ))) ;; monitor

         ;; UI schema
         (schema-print
           (make-schema
             "ui"
             (list
               (make-schema-key
                 "bounce-with-parents" "b" "true"
                 "Bounce with parents"
                 "Whether to bounce with parent tracks (direct outputs).")
               (make-schema-key
                 "disable-after-bounce" "b" "false"
                 "Disable after bounce"
                 "Disable track after bouncing.")
               (make-schema-key-with-enum
                 "bounce-step"
                 "bounce-step" "post-fader"
                 "Bounce step"
                 "Step in the processing chain to bounce at.")
               (make-schema-key
                 "bounce-tail" "i" "0"
                 "Bounce tail"
                 "Tail to allow when bouncing (for example to catch reverb tails), in milliseconds.")
               (make-schema-key-with-enum
                 "timeline-object-length"
                 "note-length" "bar"
                 "Timeline object length"
                 "Default length to use when creating timeline objects.")
               (make-schema-key-with-enum
                 "timeline-object-length-type"
                 "note-type" "normal"
                 "Timeline object length type"
                 "Default length type to use when creating timeline objects (normal, dotted, triplet).")
               (make-schema-key-with-range
                 "timeline-last-object-length" "d"
                 "1.0" "10000000000.0" "3840.0"
                 "Last timeline object's length"
                 "The length of the last created timeline object (in ticks).")
               (make-schema-key-with-enum
                 "editor-object-length"
                 "note-length" "beat"
                 "Editor object length"
                 "Default length to use when creating editor objects.")
               (make-schema-key-with-enum
                 "editor-object-length-type"
                 "note-type" "normal"
                 "Editor object length type"
                 "Default length type to use when creating editor objects (normal, dotted, triplet).")
               (make-schema-key-with-range
                 "editor-last-object-length" "d"
                 "1.0" "10000000000.0" "480.0"
                 "Last editor object's length"
                 "The length of the last created editor object (in ticks).")
               (make-schema-key-with-enum
                 "piano-roll-note-notation"
                 "note-notation" "musical"
                 "Note notation"
                 "The note notation used in the piano roll - MIDI pitch index or musical (C, C#, etc.)")
               (make-schema-key-with-enum
                 "piano-roll-default-velocity"
                 "default-velocity" "last-note"
                 "Default velocity"
                 "The default velocity to use when creating new MIDI notes.")
               (make-schema-key
                 "piano-roll-last-set-velocity"
                 "i" "90"
                 "Last set velocity"
                 "Last set velocity on a MIDI note.")
               (make-schema-key
                 "musical-mode" "b" "false"
                 "Musical mode"
                 "Whether to use musical mode. If this is on, time-stretching will be applied to events so that they match the project BPM. This mostly applies to audio regions.")
               (make-schema-key
                 "listen-notes" "b" "true"
                 "Listen to notes while they are moved"
                 "Whether to listen to MIDI notes while dragging them in the piano roll.")
               (make-schema-key
                 "ghost-notes" "b" "false"
                 "Ghost notes"
                 "Whether to show notes of other regions in the piano roll.")
               (make-schema-key-with-enum
                 "piano-roll-highlight"
                 "piano-roll-highlight" "none"
                 "Piano roll highlight"
                 "Whether to highlight chords, scales, both or none in the piano roll.")
               (make-schema-key-with-enum
                 "piano-roll-midi-modifier"
                 "midi-modifier" "velocity"
                 "Piano roll MIDI modifier"
                 "The MIDI modifier to display in the MIDI editor (only velocity is valid at the moment).")
               (make-schema-key
                 "show-automation-values" "b" "false"
                 "Show automation values"
                 "Whether to show automation values in the automation editor.")
               (make-schema-key
                 "browser-divider-position" "i" "220"
                 "Browser divider position"
                 "Height of the top part of the plugin/file browser.")
               (make-schema-key
                 "left-panel-divider-position" "i"
                 "180"
                 "Left panel divider position"
                 "Position of the resize handle of the left panel.")
               (make-schema-key
                 "left-panel-tab" "i" "0"
                 "Left panel tab index"
                 "Index of the currently opened left panel tab.")
               (make-schema-key
                 "right-panel-divider-position" "i"
                 "180"
                 "Right panel divider position"
                 "Position of the resize handle of the right panel.")
               (make-schema-key
                 "right-panel-tab" "i" "0"
                 "Right panel tab index"
                 "Index of the currently opened right panel tab.")
               (make-schema-key
                 "bot-panel-divider-position" "i"
                 "180"
                 "Bot panel divider position"
                 "Position of the resize handle of the bot panel.")
               (make-schema-key
                 "bot-panel-tab" "i" "0"
                 "Bot panel tab index"
                 "Index of the currently opened bottom panel tab.")
               (make-schema-key
                 "timeline-event-viewer-visible" "b"
                 "false"
                 "Timeline event viewer visibility"
                 "Whether the timeline event viewer is visible or not.")
               (make-schema-key
                 "editor-event-viewer-visible" "b"
                 "false"
                 "Editor event viewer visibility"
                 "Whether the editor event viewer is visible.")
               (make-schema-key-with-enum
                 "transport-display"
                 "transport-display" "bbt"
                 "Playhead display type"
                 "Selected playhead display type (BBT/time).")
               (make-schema-key-with-enum
                 "jack-transport-type"
                 "jack-transport-type" "none"
                 "JACK transport type"
                 "Selected JACK transport behavior (master/client/none)")
               (make-schema-key-with-enum
                 "ruler-display"
                 "transport-display" "bbt"
                 "Ruler display type"
                 "Selected ruler display type (BBT/time).")
               (make-schema-key-with-enum
                 "selected-tool"
                 "tool" "select-normal"
                 "Selected editing tool"
                 "Selected editing tool.")
               (make-schema-key
                 "midi-function" "i" "0"
                 "Last used MIDI function"
                 "Last used MIDI function (index corresponding to enum in midi function action).")
               (make-schema-key
                 "automation-function" "i" "0"
                 "Last used automation function"
                 "Last used automation function (index corresponding to enum in automation function action).")
               (make-schema-key
                 "audio-function" "i" "0"
                 "Last used audio function"
                 "Last used audio function (index corresponding to enum in audio function action).")
               (make-schema-key-with-range
                 "audio-function-pitch-shift-ratio" "d"
                 "0.001" "100.0" "1.0"
                 "Last used pitch shift ratio"
                 "Last used pitch shift ratio.")
               (make-schema-key
                 "timeline-playhead-scroll-edges" "b"
                 "true"
                 "Playhead scroll edges (timeline)"
                 "Whether to scroll when the playhead reaches the visible edge (timeline).")
               (make-schema-key
                 "timeline-playhead-follow" "b"
                 "false"
                 "Follow playhead (timeline)"
                 "Whether to follow the playhead. When this is on, the visible area will stay centered on the playhead (timeline).")
               (make-schema-key
                 "editor-playhead-scroll-edges" "b"
                 "true"
                 "Playhead scroll edges (editor)"
                 "Whether to scroll when the playhead reaches the visible edge (editor).")
               (make-schema-key
                 "editor-playhead-follow" "b"
                 "false"
                 "Follow playhead (editor)"
                 "Whether to follow the playhead. When this is on, the visible area will stay centered on the playhead (editor).")
               (make-schema-key
                 "track-filter-name" "s"
                 ""
                 "Track filter name"
                 "Name to filter tracks with.")
               (make-schema-key
                 "track-filter-type" "au"
                 "[]"
                 "Track filter type"
                 "Track types to filter tracks with.")
               (make-schema-key
                 "track-filter-show-disabled" "b"
                 "true"
                 "Show disabled tracks"
                 "Whether to show disabled tracks when filtering.")
               (make-schema-key
                 "track-autoarm" "b" "true"
                 "Auto-arm tracks"
                 "Whether to automatically arm tracks for recording.")
               (make-schema-key
                 "track-autoselect" "b" "true"
                 "Auto-select tracks"
                 "Whether to automatically select tracks when a region beloging to the track is clicked.")
             ))) ;; ui

         (schema-print
           (make-schema
             "ui.midi-functions.crescendo"
             (list
               (make-schema-key
                 "start-velocity" "i" "1"
                 "Start velocity"
                 "Start velocity.")
               (make-schema-key
                 "end-velocity" "i" "127"
                 "End velocity"
                 "End velocity.")
               (make-schema-key-with-enum
                 "curve-algo" "curve-algorithm"
                 "superellipse" "Curve algorithm"
                 "Curve algorithm.")
               (make-schema-key
                 "curviness" "i" "50"
                 "Curviness"
                 "Curviness percentage.")
             ))) ;; ui.midi-functions.crescendo

         (schema-print
           (make-schema
             "ui.midi-functions.flam"
             (list
               (make-schema-key
                 "time" "d" "10"
                 "Time"
                 "Time (ms).")
               (make-schema-key
                 "velocity" "i" "127"
                 "velocity"
                 "Velocity of the added note.")
             ))) ;; ui.midi-functions.flam

         (schema-print
           (make-schema
             "ui.midi-functions.strum"
             (list
               (make-schema-key
                 "ascending" "b" "true"
                 "Ascending"
                 "Whether to strum in ascending order.")
               (make-schema-key-with-enum
                 "curve-algo" "curve-algorithm"
                 "superellipse" "Curve algorithm"
                 "Curve algorithm.")
               (make-schema-key
                 "curviness" "i" "50"
                 "Curviness"
                 "Curviness percentage.")
               (make-schema-key
                 "total-time" "d" "50.0"
                 "Total time"
                 "Total time per chord in ms.")
             ))) ;; ui.midi-functions.strum

         (schema-print
           (make-schema
             "ui.plugin-browser"
             (list
               (make-schema-key-with-enum
                 "plugin-browser-tab"
                 "plugin-browser-tab" "category"
                 "Plugin browser tab"
                 "Selected plugin browser tab.")
               (make-schema-key-with-enum
                 "plugin-browser-filter"
                 "plugin-browser-filter" "none"
                 "Plugin browser filter"
                 "Selected plugin browser filter")
               (make-schema-key-with-enum
                 "plugin-browser-sort-style"
                 "plugin-browser-sort-style" "alpha"
                 "Plugin browser sort style"
                 "Selected plugin browser sort style")
               (make-schema-key
                 "plugin-browser-collections" "as"
                 "[]"
                 "Plugin browser collections"
                 "Tree paths of the selected collections in the plugin browser.")
               (make-schema-key
                 "plugin-browser-authors" "as"
                 "[]"
                 "Plugin browser authors"
                 "Tree paths of the selected authors in the plugin browser.")
               (make-schema-key
                 "plugin-browser-categories" "as"
                 "[]"
                 "Plugin browser categories"
                 "Tree paths of the selected categories in the plugin browser.")
               (make-schema-key
                 "plugin-browser-protocols" "as"
                 "[]"
                 "Plugin browser protocols"
                 "Tree paths of the selected protocols in the plugin browser.")
             ))) ;; ui.plugin-browser

         (schema-print
           (make-schema
             "ui.file-browser"
             (list
               (make-schema-key
                 "file-browser-bookmarks" "as"
                 "[]"
                 "File browser bookmarks"
                 "Location bookmarks for file browser (absolute paths).")
               (make-schema-key
                 "file-browser-selected-bookmark" "s"
                 ""
                 "File browser selected bookmark"
                 "Selected bookmark in file browser.")
               (make-schema-key
                 "autoplay" "b" "true"
                 "Autoplay"
                 "Whether to autoplay the selected file.")
               (make-schema-key
                 "show-unsupported-files" "b" "false"
                 "Show unsupported files"
                 "Whether to show unsupported files in the file browser.")
               (make-schema-key
                 "show-hidden-files" "b" "false"
                 "Show hidden files"
                 "Whether to show hidden files in the file browser.")
               (make-schema-key-with-enum
                 "filter"
                 "file-browser-filter" "none"
                 "File browser filter"
                 "Selected file browser filter")
               (make-schema-key
                 "last-location" "s" ""
                 "Last location"
                 "Last visited location.")
               (make-schema-key
                 "instrument" "s" ""
                 "Instrument"
                 "Instrument plugin to use for MIDI auditioning.")
             ))) ;; ui.file-browser

         (schema-print
           (make-schema
             "ui.mixer"
             (list
               (make-schema-key
                 "inserts-expanded" "b" "true"
                 "Inserts expanded"
                 "Whether inserts are expanded.")
               (make-schema-key
                 "midi-fx-expanded" "b" "false"
                 "MIDI FX expanded"
                 "Whether MIDI FX are expanded.")
               (make-schema-key
                 "sends-expanded" "b" "false"
                 "Sends expanded"
                 "Whether sends are expanded.")
             ))) ;; ui.mixer

         (schema-print
           (make-schema
             "ui.inspector"
             (list
               (make-schema-key
                 "track-properties-expanded" "b"
                 "true"
                 "Track properties expanded"
                 "Whether track properties is expanded.")
               (make-schema-key
                 "track-outputs-expanded" "b"
                 "true"
                 "Track outputs expanded"
                 "Whether track outputs is expanded.")
               (make-schema-key
                 "track-sends-expanded" "b"
                 "true"
                 "Track sends expanded"
                 "Whether track sends is expanded.")
               (make-schema-key
                 "track-inputs-expanded" "b"
                 "true"
                 "Track inputs expanded"
                 "Whether track inputs is expanded.")
               (make-schema-key
                 "track-controls-expanded" "b"
                 "true"
                 "Track controls expanded"
                 "Whether track controls is expanded.")
               (make-schema-key
                 "track-inserts-expanded" "b"
                 "true"
                 "Track inserts expanded"
                 "Whether track inserts is expanded.")
               (make-schema-key
                 "track-midi-fx-expanded" "b"
                 "true"
                 "Track midi-fx expanded"
                 "Whether track midi-fx is expanded.")
               (make-schema-key
                 "track-fader-expanded" "b"
                 "true"
                 "Track fader expanded"
                 "Whether track fader is expanded.")
               (make-schema-key
                 "track-comment-expanded" "b"
                 "true"
                 "Track comment expanded"
                 "Whether track comment is expanded.")
             ))) ;; ui.inspector

         (schema-print
           (make-schema
             "ui.panels"
             (list
               (make-schema-key
                 "track-visibility-detached" "b"
                 "false"
                 "Track visibility detached"
                 "Whether the track visibility panel is detached.")
               (make-schema-key
                 "track-visibility-size"
                 "(ii)" "(128,128)"
                 "Track visibility size"
                 "Track visibility panel size when detached.")
               (make-schema-key
                 "track-inspector-detached" "b"
                 "false"
                 "Track inspector detached"
                 "Whether the track inspector panel is detached.")
               (make-schema-key
                 "track-inspector-size"
                 "(ii)" "(128,128)"
                 "Track inspector size"
                 "Track inspector panel size when detached.")
               (make-schema-key
                 "plugin-inspector-detached" "b"
                 "false"
                 "Plugin inspector detached"
                 "Whether the plugin inspector panel is detached.")
               (make-schema-key
                 "plugin-inspector-size"
                 "(ii)" "(128,128)"
                 "Plugin inspector size"
                 "Plugin inspector panel size when detached.")
               (make-schema-key
                 "plugin-browser-detached" "b"
                 "false"
                 "Plugin browser detached"
                 "Whether the plugin browser panel is detached.")
               (make-schema-key
                 "plugin-browser-size"
                 "(ii)" "(128,128)"
                 "Plugin browser size"
                 "Plugin browser panel size when detached.")
               (make-schema-key
                 "file-browser-detached" "b"
                 "false"
                 "File browser detached"
                 "Whether the file browser panel is detached.")
               (make-schema-key
                 "chord-pack-browser-detached" "b"
                 "false"
                 "Chord pack browser detached"
                 "Whether the chord pack browser panel is detached.")
               (make-schema-key
                 "file-browser-size"
                 "(ii)" "(128,128)"
                 "File browser size"
                 "File browser panel size when detached.")
               (make-schema-key
                 "monitor-section-detached" "b"
                 "false"
                 "Monitor section detached"
                 "Whether the monitor section panel is detached.")
               (make-schema-key
                 "monitor-section-size"
                 "(ii)" "(128,128)"
                 "Monitor section size"
                 "Monitor section panel size when detached.")
               (make-schema-key
                 "modulator-view-detached" "b"
                 "false"
                 "Modulator view detached"
                 "Whether the modulator view panel is detached.")
               (make-schema-key
                 "modulator-view-size"
                 "(ii)" "(128,128)"
                 "Modulator view size"
                 "Modulator view panel size when detached.")
               (make-schema-key
                 "mixer-detached" "b"
                 "false"
                 "Mixer detached"
                 "Whether the mixer panel is detached.")
               (make-schema-key
                 "mixer-size"
                 "(ii)" "(128,128)"
                 "Mixer size"
                 "Mixer panel size when detached.")
               (make-schema-key
                 "clip-editor-detached" "b"
                 "false"
                 "Clip editor detached"
                 "Whether the clip editor panel is detached.")
               (make-schema-key
                 "clip-editor-size"
                 "(ii)" "(128,128)"
                 "Clip editor size"
                 "Clip editor panel size when detached.")
               (make-schema-key
                 "chord-pad-detached" "b"
                 "false"
                 "Chord pad detached"
                 "Whether the chord pad panel is detached.")
               (make-schema-key
                 "chord-pad-size"
                 "(ii)" "(128,128)"
                 "Chord pad size"
                 "Chord pad panel size when detached.")
               (make-schema-key
                 "timeline-detached" "b"
                 "false"
                 "Timeline detached"
                 "Whether the timeline panel is detached.")
               (make-schema-key
                 "timeline-size"
                 "(ii)" "(128,128)"
                 "Timeline size"
                 "Timeline panel size when detached.")
               (make-schema-key
                 "cc-bindings-detached" "b"
                 "false"
                 "CC bindings detached"
                 "Whether the CC bindings panel is detached.")
               (make-schema-key
                 "cc-bindings-size"
                 "(ii)" "(128,128)"
                 "CC bindings size"
                 "CC bindings panel size when detached.")
               (make-schema-key
                 "port-connections-detached" "b"
                 "false"
                 "Port connections detached"
                 "Whether the port connections panel is detached.")
               (make-schema-key
                 "port-connections-size"
                 "(ii)" "(128,128)"
                 "Port connections size"
                 "Port connections panel size when detached.")
               (make-schema-key
                 "scenes-detached" "b"
                 "false"
                 "Scenes detached"
                 "Whether the scenes panel is detached.")
               (make-schema-key
                 "scenes-size"
                 "(ii)" "(128,128)"
                 "Scenes size"
                 "Scenes panel size when detached.")
             ))) ;; ui.panels

         (schema-print
           (make-schema
             "export.audio"
             (list
               (make-schema-key
                 "genre" "s" "Electronic"
                 "Genre"
                 "Genre to use when exporting, if the file type supports it.")
               (make-schema-key
                 "artist" "s" "Zrythm"
                 "Artist"
                 "Artist to use when exporting, if the file type supports it.")
               (make-schema-key
                 "title" "s" "My Project"
                 "Title"
                 "Title to use when exporting, if the file type supports it.")
               (make-schema-key-with-enum
                 "time-range" "export-time-range"
                 "song"
                 "Time range"
                 "Time range to export.")
               (make-schema-key
                 "format" "s" "FLAC"
                 "Format"
                 "Format to export to.")
               (make-schema-key-with-enum
                 "filename-pattern"
                 "export-filename-pattern"
                 "append-format"
                 "Filename pattern"
                 "Filename pattern for exported files.")
               (make-schema-key
                 "dither" "b" "false"
                 "Dither"
                 "Add low level noise to reduce errors on lower bit depths.")
               (make-schema-key
                 "export-stems" "b" "false"
                 "Export stems"
                 "Whether to export stems instead of the mixdown.")
               (make-schema-key
                 "bit-depth" "i" "24"
                 "Bit depth"
                 "Bit depth to use when exporting")
             ))) ;; export.audio

         (schema-print
           (make-schema
             "export.midi"
             (list
               (make-schema-key
                 "genre" "s" "Electronic"
                 "Genre"
                 "Genre to use when exporting.")
               (make-schema-key
                 "artist" "s" "Zrythm"
                 "Artist"
                 "Artist to use when exporting.")
               (make-schema-key
                 "title" "s" "My Project"
                 "Title"
                 "Title to use when exporting.")
               (make-schema-key-with-enum
                 "time-range" "export-time-range"
                 "song"
                 "Time range"
                 "Time range to export.")
               (make-schema-key-with-range
                 "format" "i" "0" "1"
                 "1" "Format"
                 "MIDI file format (Type 0 or 1).")
               (make-schema-key-with-enum
                 "filename-pattern"
                 "export-filename-pattern"
                 "append-format"
                 "Filename pattern"
                 "Filename pattern for exported files.")
               (make-schema-key
                 "lanes-as-tracks" "b" "false"
                 "Lanes as tracks"
                 "Export track lanes as separate MIDI tracks.")
               (make-schema-key
                 "export-stems" "b" "false"
                 "Export stems"
                 "Whether to export stems instead of the mixdown.")
             ))) ;; export.midi

         (schema-print
           (make-schema
             "transport"
             (list
               (make-schema-key
                 "loop" "b"
                 "true"
                 "Transport loop"
                 "Whether looping is enabled.")
               (make-schema-key
                 "return-to-cue" "b"
                 "true"
                 "Return to cue"
                 "Whether return to cue on stop is enabled.")
               (make-schema-key
                 "metronome-enabled" "b" "false"
                 "Metronome enabled"
                 "Whether the metronome is enabled.")
               (make-schema-key-with-range
                 "metronome-volume" "d"
                 "0.0" "2.0" "1.0"
                 "Metronome volume"
                 "The metronome volume in amplitude (0 to 2).")
               (make-schema-key-with-enum
                 "metronome-countin"
                 "preroll-count" "none"
                 "Metronome Count-in"
                 "Count-in bars for the metronome.")
               (make-schema-key
                 "punch-mode" "b" "false"
                 "Punch mode enabled"
                 "Whether punch in/out is enabled for recording.")
               (make-schema-key
                 "start-on-midi-input" "b" "false"
                 "Start playback on MIDI input"
                 "Whether to start playback on MIDI input.")
               (make-schema-key-with-enum
                 "recording-mode" "recording-mode"
                 "takes" "Recording mode"
                 "Recording mode.")
               (make-schema-key-with-enum
                 "recording-preroll"
                 "preroll-count" "none"
                 "Recording Pre-Roll"
                 "Number of bars to pre-roll when recording.")
             ))) ;; transport

         ;; -- print preferences schemas --
         ;; the first key in each schema should
         ;; be called "info" and have the group in
         ;; the summary and the subgroup in the
         ;; description
         ;; the value is [
         ;;   sort index of group,
         ;;   sort index of child ]

         (preferences-category-print
           (make-preferences-category
             "general"
             (list
               (make-schema
                 "engine"
                 (list
                   (make-schema-key
                     "info" "ai" "[0,0]"
                     "General" "Engine")
                   (make-schema-key-with-enum
                     "audio-backend" "audio-backend"
                     "none" "Audio backend"
                     "")
                   (make-schema-key
                     "rtaudio-audio-device-name" "s"
                     "" "RtAudio device"
                     "")
                   (make-schema-key
                     "sdl-audio-device-name" "s"
                     "" "SDL device"
                     "")
                   (make-schema-key-with-enum
                     "sample-rate" "sample-rate"
                     "48000" "Samplerate"
                     "Samplerate to pass to the backend.")
                   (make-schema-key-with-enum
                     "buffer-size" "buffer-size"
                     "512" "Buffer size"
                     "Buffer size to pass to the backend.")
                   (make-schema-key-with-enum
                     "midi-backend" "midi-backend"
                     "none" "MIDI backend"
                     "")
                   (make-schema-key
                     "audio-inputs" "as"
                     "[]" "Audio inputs"
                     "A list of audio inputs to enable.")
                   (make-schema-key
                     "midi-controllers" "as"
                     "[]" "MIDI controllers"
                     "A list of controllers to enable.")
                 )) ;; general/engine
               (make-schema
                 "paths"
                 (list
                   (make-schema-key
                     "info" "ai" "[0,1]"
                     "General" "Paths")
                   (make-schema-key
                     "zrythm-dir" "s"
                     "" "Zrythm path"
                     "Directory used to save user data in.")
                 )) ;; general/paths
               (make-schema
                 "updates"
                 (list
                   (make-schema-key
                     "info" "ai" "[0,2]"
                     "General" "Updates")
                   (make-schema-key
                     "check-for-updates" "b" "false"
                     "Check for updates"
                     "Whether to check for updates on startup.")
                 )) ;; general/updates
               (make-schema
                 "other"
                 (list
                   (make-schema-key
                     "info" "ai" "[0,3]"
                     "General" "Other")
                 )) ;; general/other
             ))) ;; general

         (preferences-category-print
           (make-preferences-category
             "plugins"
             (list
               (make-schema
                 "uis"
                 (list
                   (make-schema-key
                     "info" "ai" "[1,0]"
                     "Plugins" "UIs")
                   (make-schema-key
                     "open-on-instantiate" "b"
                     "true" "Open UI on instantiation"
                     "Open plugin UIs when they are instantiated.")
                   (make-schema-key
                     "stay-on-top" "b"
                     "true" "Keep window on top"
                     "Show plugin UIs on top of the main window (if possible).")
                   (make-schema-key-with-range
                     "refresh-rate" "i" "0" "180"
                     "0" "Refresh rate"
                     "Refresh rate in Hz. If set to 0, the screen's refresh rate will be used.")
                   (make-schema-key-with-range
                     "scale-factor" "d" "0.0" "4.0"
                     "0.0" "Scale factor"
                     "Scale factor to pass to plugin UIs. If set to 0, the monitor's scale factor will be used.")
                 )) ;; plugins/uis
               (make-schema
                 "paths"
                 (list
                   (make-schema-key
                     "info" "ai" "[1,1]"
                     "Plugins" "Paths")
                   (make-schema-key
                     "vst2-search-paths" "as" "[]"
                     "VST2 plugins"
                     "VST2 plugin search paths.")
                   (make-schema-key
                     "vst3-search-paths" "as" "[]"
                     "VST3 plugins"
                     "VST3 plugin search paths.")
                   (make-schema-key
                     "clap-search-paths" "as" "[]"
                     "CLAP plugins"
                     "CLAP plugin search paths.")
                   (make-schema-key
                     "lv2-search-paths" "as" "[]"
                     "LV2 plugins"
                     "LV2 plugin search paths. Paths for plugins bundled with Zrythm will be appended to this list.")
                   (make-schema-key
                     "dssi-search-paths" "as" "[]"
                     "DSSI plugins"
                     "DSSI plugin search paths.")
                   (make-schema-key
                     "ladspa-search-paths" "as" "[]"
                     "LADSPA plugins"
                     "LADSPA plugin search paths.")
                   (make-schema-key
                     "jsfx-search-paths" "as" "[]"
                     "JSFX plugins"
                     "JSFX plugin search paths.")
                   (make-schema-key
                     "sfz-search-paths" "as" "[]"
                     "SFZ instruments"
                     "SFZ instrument search paths.")
                   (make-schema-key
                     "sf2-search-paths" "as" "[]"
                     "SF2 instruments"
                     "SF2 instrument search paths.")
                 )) ;; plugins/paths
             ))) ;; plugins

         (preferences-category-print
           (make-preferences-category
             "editing"
             (list
               (make-schema
                 "audio"
                 (list
                   (make-schema-key
                     "info" "ai" "[3,0]"
                     "Editing" "Audio")
                   (make-schema-key-with-enum
                     "fade-algorithm" "curve-algorithm"
                     "superellipse" "Fade algorithm"
                     "Default fade in/out algorithm.")
                 )) ;; editing/audio
               (make-schema
                 "automation"
                 (list
                   (make-schema-key
                     "info" "ai" "[3,1]"
                     "Editing" "Automation")
                   (make-schema-key-with-enum
                     "curve-algorithm"
                     "curve-algorithm"
                     "superellipse"
                     "Curve algorithm"
                     "Default automation curve algorithm.")
                 )) ;; editing/automation
               (make-schema
                 "undo"
                 (list
                   (make-schema-key
                     "info" "ai" "[3,2]"
                     "Editing" "Undo")
                   (make-schema-key-with-range
                     "undo-stack-length" "i" "-1"
                     "380000" "128"
                     "Undo stack length"
                     "Maximum undo history stack length. Set to -1 for unlimited.")
                 )) ;; editing/undo
             ))) ;; editing

         (preferences-category-print
           (make-preferences-category
             "projects"
             (list
               (make-schema
                 "general"
                 (list
                   (make-schema-key
                     "info" "ai" "[4,0]"
                     "Projects" "General")
                   (make-schema-key-with-range
                     "autosave-interval" "u"
                     "0" "120" "1"
                     "Autosave interval"
                     "Interval to auto-save project backups, in minutes. Set to 0 to disable.")
                 )) ;; projects/general
             ))) ;; projects

         (preferences-category-print
           (make-preferences-category
             "ui"
             (list
               (make-schema
                 "general"
                 (list
                   (make-schema-key
                     "info" "ai" "[5,0]"
                     "UI" "General")
                   (make-schema-key-with-enum
                     "graphic-detail"
                     "graphic-detail" "high"
                     "Draw detail"
                     "Level of detail to use when drawing graphics.")
                   (make-schema-key-with-range
                     "font-scale" "d"
                     "0.2" "2.0" "1.0"
                     "Font scale"
                     "Font scaling.")
                   (make-schema-key-with-enum
                     "language" "language"
                     "en"
                     "User interface language"
                     "")
                   (make-schema-key
                     "css-theme" "s"
                     "zrythm-theme.css"
                     "CSS theme"
                     "")
                   (make-schema-key
                     "icon-theme" "s"
                     "zrythm-dark"
                     "Icon theme"
                     "")
                 )) ;; ui/general
             ))) ;; ui

         (preferences-category-print
           (make-preferences-category
             "dsp"
             (list
               (make-schema
                 "pan"
                 (list
                   (make-schema-key
                     "info" "ai" "[2,0]"
                     "DSP" "Pan")
                   (make-schema-key-with-enum
                     "pan-algorithm" "pan-algorithm"
                     "sine"
                     "Pan algorithm"
                     "Not used at the moment.")
                   (make-schema-key-with-enum
                     "pan-law" "pan-law"
                     "minus-three-db"
                     "Pan law"
                     "Not used at the moment.")
                 )) ;; dsp/pan
             ))) ;; dsp

         (preferences-category-print
           (make-preferences-category
             "scripting"
             (list
               (make-schema
                 "general"
                 (list
                   (make-schema-key
                     "info" "ai" "[6,0]"
                     "Scripting" "General")
                   (make-schema-key
                     "default-script" "s" "print-all-tracks.scm"
                     "Default script"
                     "Default script to use in the scripting window.")
                 )) ;; scripting/general
             ))) ;; scripting

         (display "</schemalist>"))))))

(apply main (program-arguments))
